// Code generated by protoc-gen-gogo.
// source: github.com/kadisi/ipam/api/services/ipams/ipams.proto
// DO NOT EDIT!

/*
	Package ipams is a generated protocol buffer package.

	It is generated from these files:
		github.com/kadisi/ipam/api/services/ipams/ipams.proto

	It has these top-level messages:
		AcquireIPRequest
		AcquireIPReply
		Route
		IpamInfo
		ListIpamRequest
		ListIpamInfo
		ListIpamReply
		ListIPAllocationRequest
		ListIPAllocationInfo
		ListIPAllocationReply
*/
package ipams

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// skipping weak import gogoproto "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the namespace and configmap list.
type AcquireIPRequest struct {
	Podname    string   `protobuf:"bytes,1,opt,name=podname,proto3" json:"podname,omitempty"`
	Namespace  string   `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ConfigMaps []string `protobuf:"bytes,3,rep,name=configMaps" json:"configMaps,omitempty"`
}

func (m *AcquireIPRequest) Reset()                    { *m = AcquireIPRequest{} }
func (*AcquireIPRequest) ProtoMessage()               {}
func (*AcquireIPRequest) Descriptor() ([]byte, []int) { return fileDescriptorIpams, []int{0} }

// The response message containing the greetings
type AcquireIPReply struct {
	Ipaminfo *IpamInfo `protobuf:"bytes,1,opt,name=ipaminfo" json:"ipaminfo,omitempty"`
}

func (m *AcquireIPReply) Reset()                    { *m = AcquireIPReply{} }
func (*AcquireIPReply) ProtoMessage()               {}
func (*AcquireIPReply) Descriptor() ([]byte, []int) { return fileDescriptorIpams, []int{1} }

type Route struct {
	Dst string `protobuf:"bytes,1,opt,name=dst,proto3" json:"dst,omitempty"`
	Gw  string `protobuf:"bytes,2,opt,name=gw,proto3" json:"gw,omitempty"`
}

func (m *Route) Reset()                    { *m = Route{} }
func (*Route) ProtoMessage()               {}
func (*Route) Descriptor() ([]byte, []int) { return fileDescriptorIpams, []int{2} }

type IpamInfo struct {
	Ip        string   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Subnet    string   `protobuf:"bytes,2,opt,name=subnet,proto3" json:"subnet,omitempty"`
	Gateway   string   `protobuf:"bytes,3,opt,name=gateway,proto3" json:"gateway,omitempty"`
	ConfigMap string   `protobuf:"bytes,4,opt,name=configMap,proto3" json:"configMap,omitempty"`
	Vlan      string   `protobuf:"bytes,5,opt,name=vlan,proto3" json:"vlan,omitempty"`
	Routes    []*Route `protobuf:"bytes,6,rep,name=routes" json:"routes,omitempty"`
}

func (m *IpamInfo) Reset()                    { *m = IpamInfo{} }
func (*IpamInfo) ProtoMessage()               {}
func (*IpamInfo) Descriptor() ([]byte, []int) { return fileDescriptorIpams, []int{3} }

type ListIpamRequest struct {
}

func (m *ListIpamRequest) Reset()                    { *m = ListIpamRequest{} }
func (*ListIpamRequest) ProtoMessage()               {}
func (*ListIpamRequest) Descriptor() ([]byte, []int) { return fileDescriptorIpams, []int{4} }

type ListIpamInfo struct {
	Rangestart string   `protobuf:"bytes,1,opt,name=rangestart,proto3" json:"rangestart,omitempty"`
	Rangeend   string   `protobuf:"bytes,2,opt,name=rangeend,proto3" json:"rangeend,omitempty"`
	Subnet     string   `protobuf:"bytes,3,opt,name=subnet,proto3" json:"subnet,omitempty"`
	Gateway    string   `protobuf:"bytes,4,opt,name=gateway,proto3" json:"gateway,omitempty"`
	Namespace  string   `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Configmap  string   `protobuf:"bytes,6,opt,name=configmap,proto3" json:"configmap,omitempty"`
	Vlan       string   `protobuf:"bytes,7,opt,name=vlan,proto3" json:"vlan,omitempty"`
	Routes     []*Route `protobuf:"bytes,8,rep,name=routes" json:"routes,omitempty"`
}

func (m *ListIpamInfo) Reset()                    { *m = ListIpamInfo{} }
func (*ListIpamInfo) ProtoMessage()               {}
func (*ListIpamInfo) Descriptor() ([]byte, []int) { return fileDescriptorIpams, []int{5} }

type ListIpamReply struct {
	Ipams []*ListIpamInfo `protobuf:"bytes,1,rep,name=ipams" json:"ipams,omitempty"`
}

func (m *ListIpamReply) Reset()                    { *m = ListIpamReply{} }
func (*ListIpamReply) ProtoMessage()               {}
func (*ListIpamReply) Descriptor() ([]byte, []int) { return fileDescriptorIpams, []int{6} }

type ListIPAllocationRequest struct {
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Configmap string `protobuf:"bytes,2,opt,name=configmap,proto3" json:"configmap,omitempty"`
}

func (m *ListIPAllocationRequest) Reset()                    { *m = ListIPAllocationRequest{} }
func (*ListIPAllocationRequest) ProtoMessage()               {}
func (*ListIPAllocationRequest) Descriptor() ([]byte, []int) { return fileDescriptorIpams, []int{7} }

type ListIPAllocationInfo struct {
	Ip      string   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Subnet  string   `protobuf:"bytes,2,opt,name=subnet,proto3" json:"subnet,omitempty"`
	Gateway string   `protobuf:"bytes,3,opt,name=gateway,proto3" json:"gateway,omitempty"`
	Podname string   `protobuf:"bytes,4,opt,name=podname,proto3" json:"podname,omitempty"`
	Vlan    string   `protobuf:"bytes,5,opt,name=vlan,proto3" json:"vlan,omitempty"`
	Routes  []*Route `protobuf:"bytes,6,rep,name=routes" json:"routes,omitempty"`
}

func (m *ListIPAllocationInfo) Reset()                    { *m = ListIPAllocationInfo{} }
func (*ListIPAllocationInfo) ProtoMessage()               {}
func (*ListIPAllocationInfo) Descriptor() ([]byte, []int) { return fileDescriptorIpams, []int{8} }

type ListIPAllocationReply struct {
	Info []*ListIPAllocationInfo `protobuf:"bytes,1,rep,name=info" json:"info,omitempty"`
}

func (m *ListIPAllocationReply) Reset()                    { *m = ListIPAllocationReply{} }
func (*ListIPAllocationReply) ProtoMessage()               {}
func (*ListIPAllocationReply) Descriptor() ([]byte, []int) { return fileDescriptorIpams, []int{9} }

func init() {
	proto.RegisterType((*AcquireIPRequest)(nil), "ipams.AcquireIPRequest")
	proto.RegisterType((*AcquireIPReply)(nil), "ipams.AcquireIPReply")
	proto.RegisterType((*Route)(nil), "ipams.Route")
	proto.RegisterType((*IpamInfo)(nil), "ipams.IpamInfo")
	proto.RegisterType((*ListIpamRequest)(nil), "ipams.ListIpamRequest")
	proto.RegisterType((*ListIpamInfo)(nil), "ipams.ListIpamInfo")
	proto.RegisterType((*ListIpamReply)(nil), "ipams.ListIpamReply")
	proto.RegisterType((*ListIPAllocationRequest)(nil), "ipams.ListIPAllocationRequest")
	proto.RegisterType((*ListIPAllocationInfo)(nil), "ipams.ListIPAllocationInfo")
	proto.RegisterType((*ListIPAllocationReply)(nil), "ipams.ListIPAllocationReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for IpamService service

type IpamServiceClient interface {
	// qcquire unused ip
	AcquireIP(ctx context.Context, in *AcquireIPRequest, opts ...grpc.CallOption) (*AcquireIPReply, error)
	ListIpam(ctx context.Context, in *ListIpamRequest, opts ...grpc.CallOption) (*ListIpamReply, error)
	ListIPAllocation(ctx context.Context, in *ListIPAllocationRequest, opts ...grpc.CallOption) (*ListIPAllocationReply, error)
}

type ipamServiceClient struct {
	cc *grpc.ClientConn
}

func NewIpamServiceClient(cc *grpc.ClientConn) IpamServiceClient {
	return &ipamServiceClient{cc}
}

func (c *ipamServiceClient) AcquireIP(ctx context.Context, in *AcquireIPRequest, opts ...grpc.CallOption) (*AcquireIPReply, error) {
	out := new(AcquireIPReply)
	err := grpc.Invoke(ctx, "/ipams.IpamService/AcquireIP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipamServiceClient) ListIpam(ctx context.Context, in *ListIpamRequest, opts ...grpc.CallOption) (*ListIpamReply, error) {
	out := new(ListIpamReply)
	err := grpc.Invoke(ctx, "/ipams.IpamService/ListIpam", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipamServiceClient) ListIPAllocation(ctx context.Context, in *ListIPAllocationRequest, opts ...grpc.CallOption) (*ListIPAllocationReply, error) {
	out := new(ListIPAllocationReply)
	err := grpc.Invoke(ctx, "/ipams.IpamService/ListIPAllocation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IpamService service

type IpamServiceServer interface {
	// qcquire unused ip
	AcquireIP(context.Context, *AcquireIPRequest) (*AcquireIPReply, error)
	ListIpam(context.Context, *ListIpamRequest) (*ListIpamReply, error)
	ListIPAllocation(context.Context, *ListIPAllocationRequest) (*ListIPAllocationReply, error)
}

func RegisterIpamServiceServer(s *grpc.Server, srv IpamServiceServer) {
	s.RegisterService(&_IpamService_serviceDesc, srv)
}

func _IpamService_AcquireIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcquireIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpamServiceServer).AcquireIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipams.IpamService/AcquireIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpamServiceServer).AcquireIP(ctx, req.(*AcquireIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpamService_ListIpam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIpamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpamServiceServer).ListIpam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipams.IpamService/ListIpam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpamServiceServer).ListIpam(ctx, req.(*ListIpamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpamService_ListIPAllocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIPAllocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpamServiceServer).ListIPAllocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipams.IpamService/ListIPAllocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpamServiceServer).ListIPAllocation(ctx, req.(*ListIPAllocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IpamService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ipams.IpamService",
	HandlerType: (*IpamServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AcquireIP",
			Handler:    _IpamService_AcquireIP_Handler,
		},
		{
			MethodName: "ListIpam",
			Handler:    _IpamService_ListIpam_Handler,
		},
		{
			MethodName: "ListIPAllocation",
			Handler:    _IpamService_ListIPAllocation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/kadisi/ipam/api/services/ipams/ipams.proto",
}

func (m *AcquireIPRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AcquireIPRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Podname) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIpams(dAtA, i, uint64(len(m.Podname)))
		i += copy(dAtA[i:], m.Podname)
	}
	if len(m.Namespace) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIpams(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.ConfigMaps) > 0 {
		for _, s := range m.ConfigMaps {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *AcquireIPReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AcquireIPReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ipaminfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIpams(dAtA, i, uint64(m.Ipaminfo.Size()))
		n1, err := m.Ipaminfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *Route) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Route) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Dst) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIpams(dAtA, i, uint64(len(m.Dst)))
		i += copy(dAtA[i:], m.Dst)
	}
	if len(m.Gw) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIpams(dAtA, i, uint64(len(m.Gw)))
		i += copy(dAtA[i:], m.Gw)
	}
	return i, nil
}

func (m *IpamInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpamInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ip) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIpams(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if len(m.Subnet) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIpams(dAtA, i, uint64(len(m.Subnet)))
		i += copy(dAtA[i:], m.Subnet)
	}
	if len(m.Gateway) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintIpams(dAtA, i, uint64(len(m.Gateway)))
		i += copy(dAtA[i:], m.Gateway)
	}
	if len(m.ConfigMap) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintIpams(dAtA, i, uint64(len(m.ConfigMap)))
		i += copy(dAtA[i:], m.ConfigMap)
	}
	if len(m.Vlan) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintIpams(dAtA, i, uint64(len(m.Vlan)))
		i += copy(dAtA[i:], m.Vlan)
	}
	if len(m.Routes) > 0 {
		for _, msg := range m.Routes {
			dAtA[i] = 0x32
			i++
			i = encodeVarintIpams(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ListIpamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListIpamRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ListIpamInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListIpamInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Rangestart) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIpams(dAtA, i, uint64(len(m.Rangestart)))
		i += copy(dAtA[i:], m.Rangestart)
	}
	if len(m.Rangeend) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIpams(dAtA, i, uint64(len(m.Rangeend)))
		i += copy(dAtA[i:], m.Rangeend)
	}
	if len(m.Subnet) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintIpams(dAtA, i, uint64(len(m.Subnet)))
		i += copy(dAtA[i:], m.Subnet)
	}
	if len(m.Gateway) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintIpams(dAtA, i, uint64(len(m.Gateway)))
		i += copy(dAtA[i:], m.Gateway)
	}
	if len(m.Namespace) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintIpams(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Configmap) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintIpams(dAtA, i, uint64(len(m.Configmap)))
		i += copy(dAtA[i:], m.Configmap)
	}
	if len(m.Vlan) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintIpams(dAtA, i, uint64(len(m.Vlan)))
		i += copy(dAtA[i:], m.Vlan)
	}
	if len(m.Routes) > 0 {
		for _, msg := range m.Routes {
			dAtA[i] = 0x42
			i++
			i = encodeVarintIpams(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ListIpamReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListIpamReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ipams) > 0 {
		for _, msg := range m.Ipams {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIpams(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ListIPAllocationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListIPAllocationRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIpams(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.Configmap) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIpams(dAtA, i, uint64(len(m.Configmap)))
		i += copy(dAtA[i:], m.Configmap)
	}
	return i, nil
}

func (m *ListIPAllocationInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListIPAllocationInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ip) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIpams(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if len(m.Subnet) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIpams(dAtA, i, uint64(len(m.Subnet)))
		i += copy(dAtA[i:], m.Subnet)
	}
	if len(m.Gateway) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintIpams(dAtA, i, uint64(len(m.Gateway)))
		i += copy(dAtA[i:], m.Gateway)
	}
	if len(m.Podname) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintIpams(dAtA, i, uint64(len(m.Podname)))
		i += copy(dAtA[i:], m.Podname)
	}
	if len(m.Vlan) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintIpams(dAtA, i, uint64(len(m.Vlan)))
		i += copy(dAtA[i:], m.Vlan)
	}
	if len(m.Routes) > 0 {
		for _, msg := range m.Routes {
			dAtA[i] = 0x32
			i++
			i = encodeVarintIpams(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ListIPAllocationReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListIPAllocationReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Info) > 0 {
		for _, msg := range m.Info {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIpams(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Ipams(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Ipams(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintIpams(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AcquireIPRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Podname)
	if l > 0 {
		n += 1 + l + sovIpams(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovIpams(uint64(l))
	}
	if len(m.ConfigMaps) > 0 {
		for _, s := range m.ConfigMaps {
			l = len(s)
			n += 1 + l + sovIpams(uint64(l))
		}
	}
	return n
}

func (m *AcquireIPReply) Size() (n int) {
	var l int
	_ = l
	if m.Ipaminfo != nil {
		l = m.Ipaminfo.Size()
		n += 1 + l + sovIpams(uint64(l))
	}
	return n
}

func (m *Route) Size() (n int) {
	var l int
	_ = l
	l = len(m.Dst)
	if l > 0 {
		n += 1 + l + sovIpams(uint64(l))
	}
	l = len(m.Gw)
	if l > 0 {
		n += 1 + l + sovIpams(uint64(l))
	}
	return n
}

func (m *IpamInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovIpams(uint64(l))
	}
	l = len(m.Subnet)
	if l > 0 {
		n += 1 + l + sovIpams(uint64(l))
	}
	l = len(m.Gateway)
	if l > 0 {
		n += 1 + l + sovIpams(uint64(l))
	}
	l = len(m.ConfigMap)
	if l > 0 {
		n += 1 + l + sovIpams(uint64(l))
	}
	l = len(m.Vlan)
	if l > 0 {
		n += 1 + l + sovIpams(uint64(l))
	}
	if len(m.Routes) > 0 {
		for _, e := range m.Routes {
			l = e.Size()
			n += 1 + l + sovIpams(uint64(l))
		}
	}
	return n
}

func (m *ListIpamRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ListIpamInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Rangestart)
	if l > 0 {
		n += 1 + l + sovIpams(uint64(l))
	}
	l = len(m.Rangeend)
	if l > 0 {
		n += 1 + l + sovIpams(uint64(l))
	}
	l = len(m.Subnet)
	if l > 0 {
		n += 1 + l + sovIpams(uint64(l))
	}
	l = len(m.Gateway)
	if l > 0 {
		n += 1 + l + sovIpams(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovIpams(uint64(l))
	}
	l = len(m.Configmap)
	if l > 0 {
		n += 1 + l + sovIpams(uint64(l))
	}
	l = len(m.Vlan)
	if l > 0 {
		n += 1 + l + sovIpams(uint64(l))
	}
	if len(m.Routes) > 0 {
		for _, e := range m.Routes {
			l = e.Size()
			n += 1 + l + sovIpams(uint64(l))
		}
	}
	return n
}

func (m *ListIpamReply) Size() (n int) {
	var l int
	_ = l
	if len(m.Ipams) > 0 {
		for _, e := range m.Ipams {
			l = e.Size()
			n += 1 + l + sovIpams(uint64(l))
		}
	}
	return n
}

func (m *ListIPAllocationRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovIpams(uint64(l))
	}
	l = len(m.Configmap)
	if l > 0 {
		n += 1 + l + sovIpams(uint64(l))
	}
	return n
}

func (m *ListIPAllocationInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovIpams(uint64(l))
	}
	l = len(m.Subnet)
	if l > 0 {
		n += 1 + l + sovIpams(uint64(l))
	}
	l = len(m.Gateway)
	if l > 0 {
		n += 1 + l + sovIpams(uint64(l))
	}
	l = len(m.Podname)
	if l > 0 {
		n += 1 + l + sovIpams(uint64(l))
	}
	l = len(m.Vlan)
	if l > 0 {
		n += 1 + l + sovIpams(uint64(l))
	}
	if len(m.Routes) > 0 {
		for _, e := range m.Routes {
			l = e.Size()
			n += 1 + l + sovIpams(uint64(l))
		}
	}
	return n
}

func (m *ListIPAllocationReply) Size() (n int) {
	var l int
	_ = l
	if len(m.Info) > 0 {
		for _, e := range m.Info {
			l = e.Size()
			n += 1 + l + sovIpams(uint64(l))
		}
	}
	return n
}

func sovIpams(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozIpams(x uint64) (n int) {
	return sovIpams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *AcquireIPRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AcquireIPRequest{`,
		`Podname:` + fmt.Sprintf("%v", this.Podname) + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`ConfigMaps:` + fmt.Sprintf("%v", this.ConfigMaps) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AcquireIPReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AcquireIPReply{`,
		`Ipaminfo:` + strings.Replace(fmt.Sprintf("%v", this.Ipaminfo), "IpamInfo", "IpamInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Route) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Route{`,
		`Dst:` + fmt.Sprintf("%v", this.Dst) + `,`,
		`Gw:` + fmt.Sprintf("%v", this.Gw) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IpamInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IpamInfo{`,
		`Ip:` + fmt.Sprintf("%v", this.Ip) + `,`,
		`Subnet:` + fmt.Sprintf("%v", this.Subnet) + `,`,
		`Gateway:` + fmt.Sprintf("%v", this.Gateway) + `,`,
		`ConfigMap:` + fmt.Sprintf("%v", this.ConfigMap) + `,`,
		`Vlan:` + fmt.Sprintf("%v", this.Vlan) + `,`,
		`Routes:` + strings.Replace(fmt.Sprintf("%v", this.Routes), "Route", "Route", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListIpamRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListIpamRequest{`,
		`}`,
	}, "")
	return s
}
func (this *ListIpamInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListIpamInfo{`,
		`Rangestart:` + fmt.Sprintf("%v", this.Rangestart) + `,`,
		`Rangeend:` + fmt.Sprintf("%v", this.Rangeend) + `,`,
		`Subnet:` + fmt.Sprintf("%v", this.Subnet) + `,`,
		`Gateway:` + fmt.Sprintf("%v", this.Gateway) + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Configmap:` + fmt.Sprintf("%v", this.Configmap) + `,`,
		`Vlan:` + fmt.Sprintf("%v", this.Vlan) + `,`,
		`Routes:` + strings.Replace(fmt.Sprintf("%v", this.Routes), "Route", "Route", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListIpamReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListIpamReply{`,
		`Ipams:` + strings.Replace(fmt.Sprintf("%v", this.Ipams), "ListIpamInfo", "ListIpamInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListIPAllocationRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListIPAllocationRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Configmap:` + fmt.Sprintf("%v", this.Configmap) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListIPAllocationInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListIPAllocationInfo{`,
		`Ip:` + fmt.Sprintf("%v", this.Ip) + `,`,
		`Subnet:` + fmt.Sprintf("%v", this.Subnet) + `,`,
		`Gateway:` + fmt.Sprintf("%v", this.Gateway) + `,`,
		`Podname:` + fmt.Sprintf("%v", this.Podname) + `,`,
		`Vlan:` + fmt.Sprintf("%v", this.Vlan) + `,`,
		`Routes:` + strings.Replace(fmt.Sprintf("%v", this.Routes), "Route", "Route", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListIPAllocationReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListIPAllocationReply{`,
		`Info:` + strings.Replace(fmt.Sprintf("%v", this.Info), "ListIPAllocationInfo", "ListIPAllocationInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringIpams(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *AcquireIPRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AcquireIPRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AcquireIPRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Podname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIpams
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Podname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIpams
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigMaps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIpams
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfigMaps = append(m.ConfigMaps, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AcquireIPReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AcquireIPReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AcquireIPReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipaminfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpams
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ipaminfo == nil {
				m.Ipaminfo = &IpamInfo{}
			}
			if err := m.Ipaminfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Route) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Route: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Route: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dst", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIpams
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dst = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gw", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIpams
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gw = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpamInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpamInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpamInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIpams
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subnet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIpams
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subnet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIpams
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigMap", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIpams
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfigMap = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vlan", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIpams
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vlan = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpams
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routes = append(m.Routes, &Route{})
			if err := m.Routes[len(m.Routes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListIpamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListIpamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListIpamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipIpams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListIpamInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListIpamInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListIpamInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rangestart", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIpams
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rangestart = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rangeend", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIpams
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rangeend = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subnet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIpams
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subnet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIpams
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIpams
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configmap", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIpams
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Configmap = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vlan", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIpams
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vlan = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpams
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routes = append(m.Routes, &Route{})
			if err := m.Routes[len(m.Routes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListIpamReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListIpamReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListIpamReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpams
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ipams = append(m.Ipams, &ListIpamInfo{})
			if err := m.Ipams[len(m.Ipams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListIPAllocationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListIPAllocationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListIPAllocationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIpams
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configmap", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIpams
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Configmap = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListIPAllocationInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListIPAllocationInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListIPAllocationInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIpams
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subnet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIpams
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subnet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIpams
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Podname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIpams
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Podname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vlan", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIpams
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vlan = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpams
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routes = append(m.Routes, &Route{})
			if err := m.Routes[len(m.Routes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListIPAllocationReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListIPAllocationReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListIPAllocationReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpams
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = append(m.Info, &ListIPAllocationInfo{})
			if err := m.Info[len(m.Info)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIpams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIpams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIpams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIpams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIpams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthIpams
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowIpams
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipIpams(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthIpams = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIpams   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/kadisi/ipam/api/services/ipams/ipams.proto", fileDescriptorIpams)
}

var fileDescriptorIpams = []byte{
	// 582 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0xeb, 0xa6, 0xed, 0xda, 0xb7, 0x63, 0x2b, 0xa6, 0xdb, 0xa2, 0x32, 0x45, 0x55, 0xc4,
	0xa1, 0x13, 0x52, 0x23, 0x15, 0x71, 0x99, 0xb4, 0xc3, 0x38, 0x51, 0x09, 0xa4, 0x29, 0x08, 0x89,
	0xab, 0x9b, 0xba, 0xc1, 0xd0, 0xc4, 0x5e, 0x92, 0xae, 0xea, 0x8d, 0x0f, 0xc3, 0x91, 0x0f, 0xb2,
	0x23, 0x47, 0x0e, 0x1c, 0x58, 0x3f, 0x02, 0x9f, 0x00, 0xd9, 0x71, 0xd2, 0x2c, 0xa5, 0x3b, 0x20,
	0x2e, 0xad, 0xdf, 0xe7, 0xf5, 0xeb, 0xbc, 0xbf, 0xc7, 0x7f, 0xe0, 0xa5, 0xcf, 0x92, 0x8f, 0x8b,
	0xc9, 0xd0, 0xe3, 0x81, 0xf3, 0x99, 0x4c, 0x59, 0xcc, 0x1c, 0x26, 0x48, 0xe0, 0x10, 0xc1, 0x9c,
	0x98, 0x46, 0x37, 0xcc, 0xa3, 0xb1, 0x52, 0xf4, 0xef, 0x50, 0x44, 0x3c, 0xe1, 0xb8, 0xae, 0x82,
	0x5e, 0xd7, 0xe7, 0x3e, 0x57, 0x8a, 0x23, 0x47, 0x69, 0xd2, 0xfe, 0x04, 0x9d, 0x4b, 0xef, 0x7a,
	0xc1, 0x22, 0x3a, 0xbe, 0x72, 0xe9, 0xf5, 0x82, 0xc6, 0x09, 0x36, 0x61, 0x4f, 0xf0, 0x69, 0x48,
	0x02, 0x6a, 0xa2, 0x3e, 0x1a, 0xb4, 0xdc, 0x2c, 0xc4, 0xa7, 0xd0, 0x92, 0xff, 0xb1, 0x20, 0x1e,
	0x35, 0xab, 0x2a, 0xb7, 0x11, 0xb0, 0x05, 0xe0, 0xf1, 0x70, 0xc6, 0xfc, 0xb7, 0x44, 0xc4, 0xa6,
	0xd1, 0x37, 0x06, 0x2d, 0xb7, 0xa0, 0xd8, 0x17, 0x70, 0x50, 0xf8, 0x96, 0x98, 0xaf, 0xf0, 0x73,
	0x68, 0xca, 0xe6, 0x58, 0x38, 0xe3, 0xea, 0x53, 0xed, 0xd1, 0xe1, 0x30, 0x6d, 0x7d, 0x2c, 0x48,
	0x30, 0x0e, 0x67, 0xdc, 0xcd, 0x27, 0xd8, 0x67, 0x50, 0x77, 0xf9, 0x22, 0xa1, 0xb8, 0x03, 0xc6,
	0x34, 0x4e, 0x74, 0x6f, 0x72, 0x88, 0x0f, 0xa0, 0xea, 0x2f, 0x75, 0x43, 0x55, 0x7f, 0x69, 0x7f,
	0x45, 0xd0, 0xcc, 0x56, 0x90, 0x49, 0x26, 0xf4, 0xec, 0x2a, 0x13, 0xf8, 0x18, 0x1a, 0xf1, 0x62,
	0x12, 0xd2, 0x44, 0x17, 0xe8, 0x48, 0x62, 0xfb, 0x24, 0xa1, 0x4b, 0xb2, 0x32, 0x8d, 0x14, 0x5b,
	0x87, 0x12, 0x3b, 0xc7, 0x30, 0x6b, 0x29, 0x76, 0x2e, 0x60, 0x0c, 0xb5, 0x9b, 0x39, 0x09, 0xcd,
	0xba, 0x4a, 0xa8, 0x31, 0x7e, 0x06, 0x8d, 0x48, 0xf6, 0x1a, 0x9b, 0x8d, 0xbe, 0x31, 0x68, 0x8f,
	0xf6, 0x35, 0x96, 0x02, 0x70, 0x75, 0xce, 0x7e, 0x0c, 0x87, 0x6f, 0x58, 0x9c, 0xc8, 0x4e, 0xb5,
	0xf7, 0xf6, 0x6f, 0x04, 0xfb, 0x99, 0xa6, 0xba, 0xb7, 0x00, 0x22, 0x12, 0xfa, 0x34, 0x4e, 0x48,
	0x94, 0x31, 0x17, 0x14, 0xdc, 0x83, 0xa6, 0x8a, 0x68, 0x38, 0xd5, 0x3c, 0x79, 0x5c, 0x20, 0x35,
	0x76, 0x91, 0xd6, 0xb6, 0x48, 0x37, 0x1b, 0x5c, 0x2f, 0x6f, 0x70, 0xee, 0x43, 0x40, 0x84, 0xd9,
	0x28, 0xfa, 0x10, 0x14, 0x7c, 0xd8, 0xfb, 0xab, 0x0f, 0xcd, 0x07, 0x7c, 0x38, 0x87, 0x47, 0x1b,
	0x1f, 0xe4, 0xb9, 0x38, 0x83, 0xf4, 0xd0, 0x9a, 0x48, 0x55, 0x3d, 0xd1, 0x55, 0x45, 0x63, 0xdc,
	0x74, 0x86, 0xfd, 0x1e, 0x4e, 0x94, 0x7c, 0x75, 0x39, 0x9f, 0x73, 0x8f, 0x24, 0x8c, 0x87, 0xd9,
	0x39, 0xbe, 0x07, 0x83, 0x1e, 0x84, 0xa9, 0x96, 0x60, 0xec, 0x6f, 0x08, 0xba, 0xe5, 0x75, 0xff,
	0xd3, 0x69, 0x2a, 0x5c, 0xaf, 0xda, 0xfd, 0xeb, 0xf5, 0xef, 0x27, 0xe9, 0x35, 0x1c, 0x6d, 0xbb,
	0x20, 0x9d, 0x74, 0xa0, 0xa6, 0x6f, 0x97, 0x2c, 0x7e, 0x5a, 0x34, 0xb2, 0x44, 0xe6, 0xaa, 0x89,
	0xa3, 0x9f, 0x08, 0xda, 0xd2, 0xe3, 0x77, 0xe9, 0x83, 0x82, 0x2f, 0xa0, 0x95, 0x5f, 0x5a, 0x7c,
	0xa2, 0xeb, 0xcb, 0x4f, 0x46, 0xef, 0x68, 0x3b, 0x21, 0xe6, 0x2b, 0xbb, 0x82, 0xcf, 0xa1, 0x99,
	0xed, 0x1a, 0x3e, 0x2e, 0x6d, 0x63, 0x56, 0xdc, 0xdd, 0xd2, 0xd3, 0x5a, 0x17, 0x3a, 0xe5, 0x46,
	0xb1, 0xb5, 0x83, 0x20, 0x5b, 0xeb, 0x74, 0x67, 0x5e, 0xad, 0xf9, 0xca, 0xbc, 0xbd, 0xb3, 0x2a,
	0x3f, 0xee, 0xac, 0xca, 0x97, 0xb5, 0x85, 0x6e, 0xd7, 0x16, 0xfa, 0xbe, 0xb6, 0xd0, 0xaf, 0xb5,
	0x85, 0x3e, 0x54, 0x26, 0x0d, 0xf5, 0x24, 0xbe, 0xf8, 0x13, 0x00, 0x00, 0xff, 0xff, 0xf6, 0x35,
	0x1d, 0x6e, 0x68, 0x05, 0x00, 0x00,
}
